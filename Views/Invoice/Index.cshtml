@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
<header>
    <link rel="stylesheet" href="~/css/Icon.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <style>
        span{
            color: red;
        }
    </style>
</header>

<div class="col-md-12 ">
     @* <div class="card shadow mb-4">
        <div class="card-header bg-info text-white text-center">
            <h4 class="mb-0">Invoice</h4>
        </div>
    </div>  *@
    <form id="invoiceForm">
        <div class="row">
            <div class="col-md-7 ps-4">
                <div class="card">
                    <div class="card-header bg-info">
                        <h6 class="mb-0 text-white">Customer Details</h6>
                    </div>
                    <div class="card-body">
                       
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Phone">Phone<span>*</span></label>
                                    <input type="text" class="form-control" id="Phone" autocomplete="off" placeholder="Enter Phone Number" required>
                                    <div id="suggestions" style="position: absolute; z-index: 1000; background: white; border: 1px solid #ccc; display: none;"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Name">Name</label>
                                    <input type="hidden" id="CustomerId">
                                    <input type="text" class="form-control" id="Name" placeholder="Enter Customer Name" autocomplete="off">
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="Address">Address</label>
                            <input type="text" class="form-control" id="Address" placeholder="Enter Address">
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-5 pe-4">
                <div class="card">
                    <div class="card-header bg-info">
                        <h6 class="mb-0 text-white">Invoice Details</h6>
                    </div>
                    <div class="card-body"> 
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                    <label for="Invoice_ID">Invoice ID</label>
                                    <input type="number" class="form-control" id="Invoice_ID" name="Invoice_ID" value="@DateTime.Now.ToString("yyyyMMddHHmmss")" placeholder="Enter Invoice ID" readonly>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="PrintedBy">Printed By</label>
                                    <input type="text" class="form-control" id="PrintedBy" placeholder="Enter Printer's Name" value="@UserManager.GetUserName(User)" readonly>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="Date">Date</label>
                            <input type="date" class="form-control" id="Date" value="@DateTime.Today.ToString("yyyy-MM-dd")">
                    </div>
                </div>
                </div>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-12 px-4">
                <div class="card">
                    <div class="card-header bg-info d-flex align-items-center">
                        <h6 class="mb-0 text-white">Invoice Items</h6>
                        <div class="ms-auto">
                            <button type="button" class="btn btn-danger btn-sm px-3" onclick="addItem()">Add Item</button>
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="row mb-3 align-items-end">
                            <div class="col-md-8">
                                <label>Product Description<span>*</span></label>
                                <input name="Description" class="form-control" placeholder="Add Product Description" />
                            </div>
                            <div class="col-md-1">
                                <label>Quantity<span>*</span></label>
                                <input name="Quantity" type="number" value="1" class="form-control" min="0" placeholder="" />
                            </div>
                            <div class="col-md-1">
                                <label>Unit Price<span>*</span></label>
                                <input name="UnitPrice" type="number" class="form-control" min="0" placeholder="" />
                            </div>
                            <div class="col-md-1">
                                <select name="DiscountType" class="form-select form-select-sm p-0" style=" flex: 0 0 auto;">
                                    <option value="@Invoice.Helper.DiscountType.Percent">Discount @Invoice.Helper.DiscountType.Percent</option>
                                    <option value="@Invoice.Helper.DiscountType.Ammount">Discount @Invoice.Helper.DiscountType.Ammount</option>
                                </select>

                                <input name="Discount" type="number" min="0" class="form-control" placeholder="" />
                            </div>
                            <div class="col-md-1">
                                <label>Total Price</label>
                                <input name="TotalPrice" id="TotalPrice" type="number" class="form-control" placeholder="0" readonly />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
    <div class="row mt-4">
        <div class="col-12 px-4">
            <div class="row">
                <div class="col-md-9">
                    <div class="card shadow mb-4">
                        <div class="card-header bg-info">
                            <h6 class="mb-0  text-white">Order List</h6>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover">
                                    <thead class="bg-light">
                                        <tr>
                                            <th scope="col" style="width: 50%;">Product Description</th>
                                            <th scope="col" style="width: 10%;">Quantity</th>
                                            <th scope="col" style="width: 10%;">Price</th>
                                            <th scope="col" style="width: 10%;">Discount</th>
                                            <th scope="col" style="width: 10%;">Total</th>
                                            <th scope="col" style="width: 10%;">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="items-container">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card shadow mb-4">
                        <div class="card-header bg-info">
                            <h6 class="mb-0 text-white">Order Summary</h6>
                        </div>
                        <div class="card-body">
                            <div class="form-group mb-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <label for="subtotal" class="mb-0">Subtotal(without Discount):</label>
                                    <input type="text" id="subtotal" class="form-control text-end" placeholder="0.00" readonly style="max-width: 120px;">
                                </div>
                            </div>
                            <div class="form-group mb-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <label for="totalDiscount" class="mb-0">Total Discount:</label>
                                    <input type="text" id="totalDiscount" class="form-control text-end" placeholder="0.00" readonly style="max-width: 120px;">
                                </div>
                            </div>
                            <hr>
                            <div class="form-group mb-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <label for="ManualDiscount" class="mb-0">Discount:</label>
                                    <input type="text" name="ManualDiscount" id="ManualDiscount" class="form-control text-end" style="max-width: 120px;">
                                </div>
                            </div>
                            <hr />
                            <div class="form-group mb-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <label for="grandTotal" class="fw-bold mb-0">Grand Total:</label>
                                    <input type="text" id="grandTotal" class="form-control text-end fw-bold" placeholder="0.00" readonly style="max-width: 120px;">
                                </div>
                            </div>
                            <div class="form-group mb-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <label for="Due" class="fw-bold mb-0">Due(Ammount):</label>
                                    <input type="text" name="Due" id="Due" class="form-control text-end" style="max-width: 120px;">
                                </div>
                            </div>
                            <div class="form-group mb-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <label for="Paid" class="fw-bold mb-0">Paid:</label>
                                    <input type="text" name="Paid" id="Paid" class="form-control text-end fw-bold" placeholder="0.00" readonly style="max-width: 120px;">
                                </div>
                            </div>
                            <div class="form-group mb-3">
                                <label class="fw-bold mb-2">Payment Method:<sup><span>*</span></sup></label>
                                <div class="d-flex flex-wrap gap-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="cashPayment" value="@Invoice.Helper.Payment.Cash">
                                        <label class="form-check-label" for="cashPayment">
                                            @Invoice.Helper.Payment.Cash
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="cardPayment" value="@Invoice.Helper.Payment.Card">
                                        <label class="form-check-label" for="bankPayment">
                                            @Invoice.Helper.Payment.Card
                                        </label>
                                    </div> 
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="bankPayment" value=" @Invoice.Helper.Payment.Bank">
                                        <label class="form-check-label" for="bankPayment">
                                            @Invoice.Helper.Payment.Bank
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="bkashPayment" value="@Invoice.Helper.Payment.Bkash">
                                        <label class="form-check-label" for="bkashPayment">
                                            @Invoice.Helper.Payment.Bkash
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="nogodPayment" value="@Invoice.Helper.Payment.Nogod">
                                        <label class="form-check-label" for="nogodPayment">
                                            @Invoice.Helper.Payment.Nogod
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="rocketPayment" value=" @Invoice.Helper.Payment.Rocket">
                                        <label class="form-check-label" for="rocketPayment">
                                            @Invoice.Helper.Payment.Rocket
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3 d-flex justify-content-center">
                                <button type="button" id="SaveButton" class="btn btn-success me-2 flex-grow-1">
                                    Save
                                </button>
                                <button type="button" id="PrintButton" class="btn btn-success flex-grow-1">
                                    Print
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@*This Javascript part is responsible for Calculation, data handling, clearing the page,
auto refference and other necessary logics*@
@section Scripts {

    <script src="~/js/jquery-3.6.0.min.js"></script>
    <script src="~/js/alert.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    @* this script is for continious adding items in order list table and clearing the invoice item fields
    its calculating the items price and discount in % and direct ammount both
    its also calculating realtime with eventlistener
    it also calculating the manual discount and shows the final price
    Then its taking Due ammount and calculating Paid Ammount*@
    <script>
               // Initialize arrays and variables
        let items = [];

        function addItem() {
            // Get values from input fields
            const description = document.querySelector('input[name="Description"]').value;
            const quantity = parseFloat(document.querySelector('input[name="Quantity"]').value);
            const unitPrice = parseFloat(document.querySelector('input[name="UnitPrice"]').value);
            const discountValue = parseFloat(document.querySelector('input[name="Discount"]').value) || 0;
            const discountType = document.querySelector('select[name="DiscountType"]').value;

            // Validate inputs
            if (!description || !quantity || !unitPrice) {
                       Swal.fire({
                            position: "top-end",
                            icon: "warning",
                            title: "Please Fill Description, price and quantity",
                            timer: 1500,
                            showConfirmButton: false,
                            customClass: {
                                popup: 'small-alert'
                            }
                        });
                return;
            }

            // Calculate total price for this item
            const subtotal = quantity * unitPrice;
            const discountAmount = calculateDiscount(subtotal, discountValue, discountType);
            const totalPrice = subtotal - discountAmount;

            // Create new item object
            const newItem = {
                description,
                quantity,
                unitPrice,
                discountValue,
                discountType,
                subtotal,
                discountAmount,
                totalPrice
            };

            // Add to items array
            items.push(newItem);
            console.log(newItem);

            // Update the table
            updateTable();

            // Clear input fields
            clearInputFields();

            // Update totals
            updateOrderSummary();
        }

        function calculateDiscount(subtotal, discountValue, discountType) {
            if (discountType === '%') {
                return (subtotal * discountValue) / 100;
            } else {
                return Math.min(discountValue, subtotal);
            }
        }

        function updateTable() {
            const tableBody = document.getElementById('items-container');
            tableBody.innerHTML = ''; // Clear existing rows

            items.forEach((item, index) => {
                const row = `
                    <tr>
                        <td>${item.description}</td>
                        <td>${item.quantity}</td>
                        <td>${item.unitPrice}</td>
                        <td>${item.discountValue}${item.discountType}</td>
                        <td>${item.totalPrice.toFixed(2)}</td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm" onclick="removeItem(${index})">
                                <i class="bi bi-trash"></i> Remove
                            </button>
                        </td>
                    </tr>
                `;
                tableBody.insertAdjacentHTML('beforeend', row);
            });
        }

        function removeItem(index) {
            items.splice(index, 1);
            updateTable();
            updateOrderSummary();
        }

        function clearInputFields() {
            document.querySelector('input[name="Description"]').value = '';
            document.querySelector('input[name="Quantity"]').value = '1';
            document.querySelector('input[name="UnitPrice"]').value = '';
            document.querySelector('input[name="Discount"]').value = '';
            document.querySelector('input[name="TotalPrice"]').value = '';
        }

            function updateOrderSummary() {
            // Calculate subtotal
            const subtotal = items.reduce((sum, item) => sum + item.subtotal, 0);

            // Calculate total item discounts
            const itemDiscounts = items.reduce((sum, item) => sum + item.discountAmount, 0);

            // Get manual discount
            const manualDiscount = parseFloat(document.getElementById('ManualDiscount').value) || 0;

            // Calculate grand total
            const grandTotal = subtotal - itemDiscounts - manualDiscount;

            // Get Due amount entered by user
            const Due = parseFloat(document.getElementById('Due').value) || 0;

            // Calculate Paid amount (it's what's left after subtracting the due amount)
            const Paid = Math.max(0, grandTotal - Due);

            // Update display fields
            document.getElementById('subtotal').value = subtotal.toFixed(2);
            document.getElementById('totalDiscount').value = (itemDiscounts + manualDiscount).toFixed(2);
            document.getElementById('grandTotal').value = Math.max(0, grandTotal).toFixed(2);
            document.getElementById('Paid').value = Math.max(0, Paid).toFixed(2);
        }


        // Add event listeners for real-time total calculation
        document.querySelector('input[name="Quantity"]').addEventListener('input', calculateLineTotal);
        document.querySelector('input[name="UnitPrice"]').addEventListener('input', calculateLineTotal);
        document.querySelector('input[name="Discount"]').addEventListener('input', calculateLineTotal);
        document.querySelector('select[name="DiscountType"]').addEventListener('change', calculateLineTotal);

        // Add event listener for manual discount
        document.getElementById('ManualDiscount').addEventListener('input', function(e) {
            // Sanitize input to allow only numbers and decimal point
            let value = e.target.value.replace(/[^\d.]/g, '');

            // Ensure only one decimal point
            const parts = value.split('.');
            if (parts.length > 2) value = parts[0] + '.' + parts.slice(1).join('');

            // Limit to 2 decimal places
            if (parts.length > 1) value = parts[0] + '.' + parts[1].slice(0, 2);

            e.target.value = value;
            updateOrderSummary();
        });

        // Add event listener for Due field with same behavior as ManualDiscount
        document.getElementById('Due').addEventListener('input', function(e) {
            // Sanitize input to allow only numbers and decimal point
            let value = e.target.value.replace(/[^\d.]/g, '');

            // Ensure only one decimal point
            const parts = value.split('.');
            if (parts.length > 2) value = parts[0] + '.' + parts.slice(1).join('');

            // Limit to 2 decimal places
            if (parts.length > 1) value = parts[0] + '.' + parts[1].slice(0, 2);

            //Sending to function to calculation
            e.target.value = value;
            updateOrderSummary();
        });

        function calculateLineTotal() {
            const quantity = parseFloat(document.querySelector('input[name="Quantity"]').value) || 0;
            const unitPrice = parseFloat(document.querySelector('input[name="UnitPrice"]').value) || 0;
            const discountValue = parseFloat(document.querySelector('input[name="Discount"]').value) || 0;
            const discountType = document.querySelector('select[name="DiscountType"]').value;

            const subtotal = quantity * unitPrice;
            const discountAmount = calculateDiscount(subtotal, discountValue, discountType);
            const total = subtotal - discountAmount;

            document.querySelector('input[name="TotalPrice"]').value = total.toFixed(2);
        }
    </script>




    @* this script handels the invoice saving and printing 
    It sends all data to the controller and also Opens a new tab where it can be Printed*@
    <script>
             $(document).ready(function () {
            // Function to collect the invoice data dynamically when the button is clicked
            function getInvoiceData(isPrint = false) {
                var selectedPaymentMethod = $('input[name="paymentMethod"]:checked').val();

                return {
                    CustomerId: $('#CustomerId').val(),
                    Name: $('#Name').val(),
                    Phone: $('#Phone').val(),
                    Address: $('#Address').val(),
                    GrandTotal: $('#grandTotal').val(),
                    InvoiceID: $('#Invoice_ID').val(),
                    Total_Discount: $('#totalDiscount').val(),
                    Due: $('#Due').val(),
                    Paid: $('#Paid').val(),
                    Date: $('#Date').val(),
                    ManualDiscount: $('#ManualDiscount').val(),
                    PaymentMethod: selectedPaymentMethod,
                    IsPrint: isPrint,
                    InvoiceItems: items.map(item => ({
                        TotalPrice: item.totalPrice,
                        Description: item.description,
                        Quantity: item.quantity,
                        ItemDiscount: item.discountValue,
                        discountType: item.discountType,
                        Price: item.unitPrice
                    }))
                };
            }

            // Function to validate form
            function validateForm() {
            var isValid = true;
            var errorMessages = [];

            // Check payment method
            if (!$('input[name="paymentMethod"]:checked').val()) {
                errorMessages.push("Please select a payment method");
                isValid = false;
            }

            // Check phone number
            var phone = $('#Phone').val();
            if (!phone || phone.trim() === '') {
                errorMessages.push("Phone number is required");
                isValid = false;
            }

            if (!items || items.length === 0) {
            errorMessages.push("Invoice items cannot be empty");
            isValid = false;
        } else {
            // Check if any of the invoice item fields are missing or invalid
            items.forEach((item, index) => {
                if (!item.description || item.description.trim() === '') {
                    errorMessages.push(`Description is required for item ${index + 1}`);
                    isValid = false;
                }
                if (!item.quantity || item.quantity <= 0) {
                    errorMessages.push(`Quantity must be greater than 0 for item ${index + 1}`);
                    isValid = false;
                }
                if (!item.unitPrice || item.unitPrice <= 0) {
                    errorMessages.push(`Price must be greater than 0 for item ${index + 1}`);
                    isValid = false;
                }
            });
            }

            if (!isValid) {
                Swal.fire({
                    position: "top-end",
                    icon: "warning",
                    title: "Required Fields Missing",
                    html: errorMessages.join('<br>'),
                    timer: 2000,
                    showConfirmButton: false,
                    customClass: {
                        popup: 'small-alert'
                    }
                });
                return false;
            }
            return true;
        }

       
            // Handle Save Button Click
            $("#SaveButton").click(function (event) {
                event.preventDefault();

                if (!validateForm()) {
                    return;
                }

                var invoiceData = getInvoiceData(false);
                console.log("Invoice Data:", invoiceData);
                $.ajax({
                    url: '@Url.Action("Index", "Invoice")',
                    type: 'POST',
                    data: invoiceData,
                    success: function () {
                        Swal.fire({
                            position: "top-end",
                            icon: "success",
                            title: "Invoice has been saved!",
                            timer: 1500,
                            showConfirmButton: false,
                            customClass: {
                                popup: 'small-alert'
                            }
                        });

                        clearForm();
                       
                    },
                    error: function () {
                        Swal.fire({
                            position: "top-end",
                            icon: "error",
                            title: "Something went wrong",
                            timer: 1500,
                            showConfirmButton: false,
                            customClass: {
                                popup: 'small-alert'
                            }
                        });
                    }
                });
            });

            // Handle Print Button Click
            $("#PrintButton").click(function (event) {
                event.preventDefault();

                if (!validateForm()) {
                    return;
                }

                var invoiceData = getInvoiceData(true);
                $.ajax({
                    url: '@Url.Action("Index", "Invoice")',
                    type: 'POST',
                    data: invoiceData,
                    success: function () {
                       window.open('@Url.Action("InvoicePrint", "Invoice")', '_blank');

                       clearForm();
                    },
                    error: function () {
                        alert("Failed to print invoice.");
                    }
                });
            });
        });

    </script>




    @* This script is responsible for clearing the form on saving and printing *@
    <script>
         var clearForm = function () {
             // Reset form
                        $('#invoiceForm')[0].reset();
                        // Reset payment method radio buttons
                        $('input[name="paymentMethod"]').prop('checked', false);

                        //refreshing invoice id
                        var newInvoiceId = new Date().toISOString().replace(/[-T:.Z]/g, "").slice(0, 14);
                        $("#Invoice_ID").val(newInvoiceId);

                        //resetting order list
                        items = [];
                        updateTable();

                        //resetting order summary
                        document.getElementById('subtotal').value = "0.00";
                        document.getElementById('totalDiscount').value = "0.00";
                        document.getElementById('ManualDiscount').value = "";
                        document.getElementById('grandTotal').value = "0.00";
                        document.getElementById('Due').value = "";
                        document.getElementById('Paid').value = "0.00";
                        updateOrderSummary();
        }
    </script>




    @* this script handels auto complete and refference from database for phone
    then populates other fields accroding to the Phone Number*@
    <script>
               $(document).ready(function () {
            // Debounce function to limit API calls
            function debounce(func, delay) {
                let timeoutId;
                return function (...args) {
                    clearTimeout(timeoutId);
                    timeoutId = setTimeout(() => func.apply(this, args), delay);
                };
            }

            // Function to handle suggestion population
            function populateSuggestion(item) {
                $('#CustomerId').val(item.id || '0');
                $('#Name').val(item.name || '');
                $('#Phone').val(item.phone || '');
                $('#Address').val(item.address || '');
                $('#suggestions').hide();
            }

            // Fetch phone suggestions with debounce
            const fetchPhoneSuggestions = debounce(function(phoneNumber) {
                if (phoneNumber.length < 3) {
                    $('#suggestions').hide();
                    return;
                }

                $.ajax({
                    url: '/GetPhoneSuggestions',
                    type: 'GET',
                    data: { phone: phoneNumber },
                    success: function (data) {
                        const suggestionsDiv = $('#suggestions');
                        suggestionsDiv.empty().hide();

                        if (data.success && data.references && data.references.length) {
                            data.references.forEach(function (item) {
                                const suggestionItem = $(`
                                    <div class="suggestion-item"
                                         style="padding: 5px; cursor: pointer;"
                                         data-id="${item.id}"
                                         data-name="${item.name}"
                                         data-phone="${item.phone}"
                                         data-address="${item.address}">
                                         ${item.name} - ${item.phone}
                                    </div>
                                `);

                                suggestionItem.on('click', function() {
                                    populateSuggestion({
                                        id: $(this).data('id'),
                                        name: $(this).data('name'),
                                        phone: $(this).data('phone'),
                                        address: $(this).data('address')
                                    });
                                });

                                suggestionsDiv.append(suggestionItem);
                            });
                            suggestionsDiv.show();
                        } else {
                            suggestionsDiv.append(`<div style="padding: 5px;">No suggestions found</div>`);
                            suggestionsDiv.show();
                        }
                    },
                    error: function () {
                        console.error('Error fetching phone suggestions.');
                        $('#suggestions').hide();
                    }
                });
            }, 300); // 300ms delay to reduce unnecessary API calls

            // Phone input event handler
            $('#Phone').on('input', function () {
                const phoneNumber = $(this).val();
                $('#CustomerId').val('0'); // Reset customer ID on input
                fetchPhoneSuggestions(phoneNumber);
            });

            // Close suggestions when clicking outside
            $(document).on('click', function (e) {
                if (!$(e.target).closest('#Phone, #suggestions').length) {
                    $('#suggestions').hide();
                }
            });
        });

    </script>
}
